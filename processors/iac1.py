# coding=utf-8
# Copyright 2018 The Google AI Language Team Authors and The HuggingFace Inc. team.
# Copyright (c) 2018, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
""" IAC1 utils (dataset loading and evaluation) """


import jsonlines
import logging
import os

from transformers import DataProcessor
from .utils import StanceExample

logger = logging.getLogger(__name__)


class IAC1Processor(DataProcessor):
    """Processor for the IAC v1 dataset.
    map from label generated by mdl-stance-robustness
    Adapted from https://github.com/google-research/bert/blob/f39e881b169b9d53bea03d2d341b31707a6c052b/run_classifier.py#L207"""

    label_map = {0: 'anti',
                 2: 'other',
                 1: 'pro'}
    language = 'en'
    contexts_dict = {'abortion': 'Abortion is the termination of a pregnancy by removal or expulsion of an embryo or fetus. Opinions of abortion may be about fetal rights, governmental authority, and women\'s rights',
                     'death penalty': 'Death penalty is a state-sanctioned practice of killing a person as a punishment for a crime',
                     'evolution': 'Evolution is change in the heritable characteristics of biological populations over successive generations',
                     'gay marriage': 'Gay marriage is the marriage of two people of the same sex or gender; debate occurs based on social viewpoints, majority rules, religious convictions, economic arguments, health-related concerns, and a variety of other issues.',
                     'gun control': 'Advocates for gun control support increased regulation of gun ownership; whereas advocates for gun rights oppose increased restriction of gun ownership',
                     'healthcare': 'The debate of healthcare centers on Hillary Clinton\'s plan for healtcare in the US',
                     'climate change': 'In common usage, climate change describes global warming; climate change has been strongly affected by climate change denial and misinformation',
                     'communism vs capitalism': 'Communism vs capitalism debate is a battle between two extreme socioeconomic theories; communism is social system in which country\'s trade and industry are controlled by the community and the share of each individual relies on his ability and needs; whereas capitalism is an economic system in which the trade and industry of the economy is owned and controlled by private individuals, to make profit',
                     'existence of god': 'The existence of God is a subject of debate in theology, philosophy of religion and popular culture',
                     'marijuana legalization': 'Marijuana is a psychoactive drug from the Cannabis plant; it has been used as a drug for both recreational and entheogenic purposes and in various traditional medicines for centuries'}

    def __init__(self):
        pass

    def get_examples(self, data_dir, split='train'):
      """See base class."""
      examples = []
      lines = jsonlines.jsonlines.open(os.path.join(data_dir, f"iac1-{split}.json"))

      for (i, line) in enumerate(lines):
        guid = "%s-%s" % (split, i)
        topic = line['premise']
        text = line['hypothesis']
        label = IAC1Processor.label_map[line['label']]
        context = IAC1Processor.contexts_dict[topic]
        assert isinstance(topic, str) and isinstance(text, str) and isinstance(label, str) and isinstance(context, str)
        examples.append(StanceExample(guid=guid, topic=topic, text=text, label=label, context=context))
      return examples

    def get_train_examples(self, data_dir):
        return self.get_examples(data_dir, split='train')

    def get_dev_examples(self, data_dir):
        return self.get_examples(data_dir, split='dev')

    def get_test_examples(self, data_dir, ):
        return self.get_examples(data_dir, split='test')

    def get_labels(self):
        """See base class."""
        return ["anti", "other", "pro"]


iac1_processors = {
    "stance": IAC1Processor,
}

iac1_output_modes = {
    "stance": "classification",
}

iac1_tasks_num_labels = {
    "stance": 3,
}
